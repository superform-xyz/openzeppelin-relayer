---
name: Build and push Docker image
on:
  workflow_call:
    inputs:
      tag:
        type: string
        description: The tag to use for the Docker image.
        required: true
jobs:
  build-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: release
    env:
      DOCKERHUB_IMAGE: openzeppelin/openzeppelin-relayer
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: '#oss-releases'
    steps:
      - name: Slack notification
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d  # v2.1.0
        with:
          status: starting
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Starting docker build and push to dockerhub for ${{ github.repository }} with tag ${{ inputs.tag }}......
        if: always()
      - name: Get github app token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e  # v2.0.6
        id: gh-app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Checkout release branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ inputs.tag }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804  # v5.7.0
        with:
          # list of Docker images to use as base name for tags
          images: ${{ env.DOCKERHUB_IMAGE }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,value=${{ inputs.tag }},pattern={{version}}
            type=sha,value=${{ github.event.inputs.commit }}
            type=raw,value=${{ inputs.tag }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}
            org.opencontainers.image.title=openzeppelin-relayer
            org.opencontainers.image.vendor=openzeppelin
            org.opencontainers.image.description="OpenZeppelin Relayer service provides infrastructure to relay transactions to the EVM and Non-EVM networks."
        env:
          DOCKER_METADATA_SHORT_SHA_LENGTH: 10
      - name: Login to Dockerhub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2  # v3.10.0
      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        id: build
        with:
          context: .
          push: true
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Attest
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd  # v2.3.0
        id: attest
        with:
          subject-name: docker.io/${{ env.DOCKERHUB_IMAGE }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: false
          github-token: ${{ steps.gh-app-token.outputs.token }}
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@d2ae8d7d33235a2c36eca5780f07651ab62f54e4
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}
          repository: ${{ env.DOCKERHUB_IMAGE }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./DOCKER_README.md
      - name: Slack notification success or failure
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d  # v2.1.0
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Push to Dockerhub ${{ job.status }}!
        if: always()
      - name: Print image digest to summary
        run: |-
          echo "Image tags: ${{ steps.meta.outputs.tags }}" >> "${GITHUB_STEP_SUMMARY}"
          echo "Image labels: ${{ steps.meta.outputs.labels }}" >> "${GITHUB_STEP_SUMMARY}"
