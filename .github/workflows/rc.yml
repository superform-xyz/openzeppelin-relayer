---
name: RC for Major/Minor Releases
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Long form commit SHA to create release branch from
        required: true
        type: string
      version:
        description: Version to release/tag. If the version is v1.0.0, input should be 1.0.0
        required: true
        type: string
permissions:
  contents: write
  pull-requests: write
# run concurrency group for the workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911  # v2.13.0
        with:
          egress-policy: audit
      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e  # v2.0.6
        id: gh-app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Validate Commit SHA
        run: |
          if [[ ! "$INPUT_COMMIT_SHA" =~ ^[0-9a-f]{40}$ ]]; then
            echo "Invalid commit SHA: $INPUT_COMMIT_SHA. Please provide the full 40-character SHA."
            echo "Provided SHA: $INPUT_COMMIT_SHA"
            echo "Length: ${#$INPUT_COMMIT_SHA}"
            exit 1
          fi
          echo "Valid commit SHA: $INPUT_COMMIT_SHA"
        env:
          INPUT_COMMIT_SHA: ${{ github.event.inputs.commit_sha }}
      - name: Validate version input
        run: |
          if [[ ! "$INPUT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $INPUT_VERSION. Please provide a version in the format X.Y.Z."
            exit 1
          fi
          echo "Valid version: $INPUT_VERSION"
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
      - name: Checkout repository at commit SHA
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.event.inputs.commit_sha }}
          fetch-depth: 0
          token: ${{ steps.gh-app-token.outputs.token }}
      - name: Set release branch name
        id: set_branch
        run: |
          branch="release-v${{ github.event.inputs.version }}"
          echo "release_branch=$branch" >> $GITHUB_ENV
          echo "Release branch will be: $branch"
      - name: Check if release branch exists
        id: check_branch
        run: |
          branch="release-v${{ github.event.inputs.version }}"
          if git ls-remote --exit-code --heads origin "$branch" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Create release branch
        id: update_branch
        shell: bash
        run: |-
          branch="release-v${{ github.event.inputs.version }}"
          commit_sha="${{ github.event.inputs.commit_sha }}"
          echo "branch=$branch" >> $GITHUB_OUTPUT
          if [ "${{ steps.check_branch.outputs.exists }}" == "true" ]; then
            echo "Branch '$branch' already exists. Exiting with error."
            exit 1
          else
            echo "Branch '$branch' does not exist. Creating new branch from commit $commit_sha."
            git checkout -b $branch $commit_sha
            git push -f origin $branch
          fi
