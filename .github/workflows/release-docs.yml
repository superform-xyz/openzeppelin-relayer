---
name: Publish Docs
on:
  workflow_dispatch:
    inputs:
      tag:
        type: string
        description: The tag to use for creating docs branch or merging to docs branch.
        required: true
  workflow_call:
    inputs:
      tag:
        type: string
        description: The tag to use for creating docs branch or merging to docs branch.
        required: true
permissions:
  actions: read
  contents: write
  pull-requests: write
  id-token: write
jobs:
  docs:
    name: publish docs
    runs-on: ubuntu-latest
    environment: release
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: '#oss-releases'
      TAG: ${{ inputs.tag || github.event.inputs.tag }}
    steps:
      - name: Get github app token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e  # v2.0.6
        id: gh-app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Checkout tag
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ env.TAG }}
          token: ${{ steps.gh-app-token.outputs.token }}
      - name: Slack notification
        uses: act10ns/slack@44541246747a30eb3102d87f7a4cc5471b0ffb7d  # v2.1.0
        with:
          status: starting
          steps: ${{ toJson(steps) }}
          channel: ${{ env.SLACK_CHANNEL }}
          message: Starting creating docs for ${{ github.repository }} with tag ${{ env.TAG }}......
        if: always()
      - name: Validate Tag
        id: validate_tag
        run: |-
          TAG="${{ env.TAG }}"
          echo "Validating tag: $TAG"

          # Check if the tag matches the semantic versioning pattern
          if ! echo "$TAG" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "Error: Tag '$TAG' is not a valid semantic version."
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "${TAG#v}"
          echo "Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          RELEASE_BRANCH="release-v${MAJOR}.${MINOR}.0"
          DOCS_BRANCH="docs-v${MAJOR}.${MINOR}"
          echo "DOCS_BRANCH=${DOCS_BRANCH}" >> $GITHUB_OUTPUT
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_OUTPUT
          echo "MAJOR=${MAJOR}" >> $GITHUB_OUTPUT
          echo "MINOR=${MINOR}" >> $GITHUB_OUTPUT
          if [ "$PATCH" -ne 0 ]; then
            # If it's a patch version, create a PR to merge release branch into docs branch
            echo "Creating PR to merge ${RELEASE_BRANCH} into ${DOCS_BRANCH}"
            echo "PR_TITLE=chore: Merge ${RELEASE_BRANCH} into ${DOCS_BRANCH}"
          else
            # If the patch version is zero, create a new docs branch
            echo "Creating new docs branch ${DOCS_BRANCH}"
          fi
          echo "PR_TITLE=${PR_TITLE:-}" >> $GITHUB_OUTPUT
      - name: Create Pull Request for Docs
        if: ${{ steps.validate_tag.outputs.PR_TITLE != '' }}
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e  # v7.0.8
        with:
          token: ${{ steps.gh-app-token.outputs.token }}
          title: ${{ steps.validate_tag.outputs.PR_TITLE }}
          body: Automatically generated PR to merge release branch into docs branch for patch version update.
          base: ${{ steps.validate_tag.outputs.DOCS_BRANCH }}
          sign-commits: true
          branch: ${{ steps.validate_tag.outputs.RELEASE_BRANCH }}
          commit-message: ${{ steps.validate_tag.outputs.PR_TITLE }}
      - name: Create Docs Branch
        if: ${{ steps.validate_tag.outputs.PR_TITLE == '' }}
        run: |
          echo "Creating docs branch ${DOCS_BRANCH}"
          git checkout -b "${DOCS_BRANCH}"
          git push origin "${DOCS_BRANCH}"
        env:
          DOCS_BRANCH: ${{ steps.validate_tag.outputs.DOCS_BRANCH }}
